name: JIRA Integration Workflow

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      jira_ticket:
        description: 'JIRA Ticket ID'
        required: true
        type: string
      status:
        description: 'Status to update to'
        required: true
        type: choice
        options:
        - 'In Progress'
        - 'Code Review'
        - 'Ready for QA'
        - 'QA Testing'
        - 'Ready for Production'
        - 'Done'

env:
  JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}  # https://yourcompany.atlassian.net
  JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
  JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

jobs:
  # Update JIRA when PR is opened
  pr-opened:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Extract JIRA Ticket from PR
        id: extract-jira
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Extract JIRA ticket from PR body or title (ABC-123 format)
          JIRA_TICKET=$(echo "$PR_BODY $PR_TITLE" | grep -oE '[A-Z]+-[0-9]+' | head -1)
          
          if [ -z "$JIRA_TICKET" ]; then
            echo "No JIRA ticket found in PR"
            exit 1
          fi
          
          echo "jira_ticket=$JIRA_TICKET" >> $GITHUB_OUTPUT
          echo "Found JIRA ticket: $JIRA_TICKET"

      - name: Update JIRA - PR Created
        if: steps.extract-jira.outputs.jira_ticket != ''
        run: |
          JIRA_TICKET="${{ steps.extract-jira.outputs.jira_ticket }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PREVIEW_URL="https://${{ github.event.pull_request.head.ref }}.d123456.amplifyapp.com"
          
          # Add comment to JIRA ticket
          curl -X POST \
            "$JIRA_BASE_URL/rest/api/2/issue/$JIRA_TICKET/comment" \
            -H "Content-Type: application/json" \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -d '{
              "body": "ðŸ”€ *Pull Request Created*\n\nâ€¢ *PR:* [#'$PR_NUMBER'|'$PR_URL']\nâ€¢ *Preview URL:* '$PREVIEW_URL'\nâ€¢ *Status:* Ready for Design Review\nâ€¢ *Developer:* @${{ github.event.pull_request.user.login }}\n\n_Automated update from GitHub_"
            }'
          
          # Update JIRA status to "Code Review"
          curl -X POST \
            "$JIRA_BASE_URL/rest/api/2/issue/$JIRA_TICKET/transitions" \
            -H "Content-Type: application/json" \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -d '{
              "transition": {
                "id": "31"
              },
              "fields": {
                "summary": "In Code Review - PR #'$PR_NUMBER'"
              }
            }'

  # Update JIRA when PR reviews are submitted
  pr-review-submitted:
    if: github.event_name == 'pull_request_review' && github.event.action == 'submitted'
    runs-on: ubuntu-latest
    steps:
      - name: Extract JIRA Ticket
        id: extract-jira
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          JIRA_TICKET=$(echo "$PR_BODY" | grep -oE '[A-Z]+-[0-9]+' | head -1)
          echo "jira_ticket=$JIRA_TICKET" >> $GITHUB_OUTPUT

      - name: Update JIRA - Review Submitted
        if: steps.extract-jira.outputs.jira_ticket != ''
        run: |
          JIRA_TICKET="${{ steps.extract-jira.outputs.jira_ticket }}"
          REVIEW_STATE="${{ github.event.review.state }}"
          REVIEWER="${{ github.event.review.user.login }}"
          
          if [ "$REVIEW_STATE" = "approved" ]; then
            EMOJI="âœ…"
            STATUS="Approved"
          elif [ "$REVIEW_STATE" = "changes_requested" ]; then
            EMOJI="ðŸ”„"
            STATUS="Changes Requested"
          else
            EMOJI="ðŸ’¬"
            STATUS="Commented"
          fi
          
          curl -X POST \
            "$JIRA_BASE_URL/rest/api/2/issue/$JIRA_TICKET/comment" \
            -H "Content-Type: application/json" \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -d '{
              "body": "'$EMOJI' *Code Review '$STATUS'*\n\nâ€¢ *Reviewer:* @'$REVIEWER'\nâ€¢ *Status:* '$STATUS'\nâ€¢ *Review Date:* $(date -u +\"%Y-%m-%d %H:%M UTC\")\n\n_Automated update from GitHub_"
            }'

  # Update JIRA when PR is merged to staging
  pr-merged-staging:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'staging'
    runs-on: ubuntu-latest
    steps:
      - name: Extract JIRA Ticket
        id: extract-jira
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          JIRA_TICKET=$(echo "$PR_BODY" | grep -oE '[A-Z]+-[0-9]+' | head -1)
          echo "jira_ticket=$JIRA_TICKET" >> $GITHUB_OUTPUT

      - name: Update JIRA - Deployed to Staging
        if: steps.extract-jira.outputs.jira_ticket != ''
        run: |
          JIRA_TICKET="${{ steps.extract-jira.outputs.jira_ticket }}"
          STAGING_URL="https://staging.yourapp.com"
          
          # Add comment
          curl -X POST \
            "$JIRA_BASE_URL/rest/api/2/issue/$JIRA_TICKET/comment" \
            -H "Content-Type: application/json" \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -d '{
              "body": "*Deployed to Staging*\n\nâ€¢ *Staging URL:* '$STAGING_URL'\nâ€¢ *Status:* Ready for QA Testing\nâ€¢ *Deployment Date:* $(date -u +\"%Y-%m-%d %H:%M UTC\")\n\n*QA Team:* Please begin independent testing\n\n_Automated update from GitHub_"
            }'
          
          # Update status to "Ready for QA"
          curl -X POST \
            "$JIRA_BASE_URL/rest/api/2/issue/$JIRA_TICKET/transitions" \
            -H "Content-Type: application/json" \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -d '{
              "transition": {
                "id": "41"
              }
            }'

  # Update JIRA when PR is merged to main (production)
  pr-merged-production:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Extract JIRA Ticket
        id: extract-jira
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          JIRA_TICKET=$(echo "$PR_BODY" | grep -oE '[A-Z]+-[0-9]+' | head -1)
          echo "jira_ticket=$JIRA_TICKET" >> $GITHUB_OUTPUT

      - name: Update JIRA - Deployed to Production
        if: steps.extract-jira.outputs.jira_ticket != ''
        run: |
          JIRA_TICKET="${{ steps.extract-jira.outputs.jira_ticket }}"
          PRODUCTION_URL="https://yourapp.com"
          
          # Add comment
          curl -X POST \
            "$JIRA_BASE_URL/rest/api/2/issue/$JIRA_TICKET/comment" \
            -H "Content-Type: application/json" \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -d '{
              "body": "*Deployed to Production*\n\nâ€¢ *Production URL:* '$PRODUCTION_URL'\nâ€¢ *Status:* Complete\nâ€¢ *Deployment Date:* $(date -u +\"%Y-%m-%d %H:%M UTC\")\n\n*Feature is now live for all users!*\n\n_Automated update from GitHub_"
            }'
          
          # Update status to "Done"
          curl -X POST \
            "$JIRA_BASE_URL/rest/api/2/issue/$JIRA_TICKET/transitions" \
            -H "Content-Type: application/json" \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -d '{
              "transition": {
                "id": "21"
              }
            }'

  # Manual JIRA update workflow
  manual-jira-update:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Update JIRA Status Manually
        run: |
          JIRA_TICKET="${{ github.event.inputs.jira_ticket }}"
          STATUS="${{ github.event.inputs.status }}"
          
          # Get transition ID based on status
          case "$STATUS" in
            "In Progress") TRANSITION_ID="11" ;;
            "Code Review") TRANSITION_ID="31" ;;
            "Ready for QA") TRANSITION_ID="41" ;;
            "QA Testing") TRANSITION_ID="51" ;;
            "Ready for Production") TRANSITION_ID="61" ;;
            "Done") TRANSITION_ID="21" ;;
            *) echo "Unknown status"; exit 1 ;;
          esac
          
          # Update JIRA
          curl -X POST \
            "$JIRA_BASE_URL/rest/api/2/issue/$JIRA_TICKET/transitions" \
            -H "Content-Type: application/json" \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -d '{
              "transition": {
                "id": "'$TRANSITION_ID'"
              }
            }'
          
          # Add comment
          curl -X POST \
            "$JIRA_BASE_URL/rest/api/2/issue/$JIRA_TICKET/comment" \
            -H "Content-Type: application/json" \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -d '{
              "body": "ðŸ”„ *Status Updated Manually*\n\nâ€¢ *New Status:* '$STATUS'\nâ€¢ *Updated by:* @${{ github.actor }}\nâ€¢ *Date:* $(date -u +\"%Y-%m-%d %H:%M UTC\")\n\n_Manual update from GitHub Actions_"
            }'

  # Validate JIRA connection
  validate-jira-connection:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Test JIRA API Connection
        run: |
          echo "Testing JIRA API connection..."
          
          RESPONSE=$(curl -s -w "%{http_code}" \
            "$JIRA_BASE_URL/rest/api/2/myself" \
            -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN")
          
          HTTP_CODE="${RESPONSE: -3}"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "JIRA API connection successful"
          else
            echo "JIRA API connection failed with code: $HTTP_CODE"
            exit 1
          fi
